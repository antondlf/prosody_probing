18, # eng-mav
19, # nld-gng
2,  # gbb-pd
6,  # wrm-pd
3,  # wrl-mb
4,  # gup-wat
8,  # pjt-sw01
1,  # wbp-jk
0,  # mwf-jm
5   # gbb-lg
)) +
guides(
colour = guide_legend(show = FALSE),
shape = guide_legend(override.aes = list(size = 4), nrow = 3)
)
}
data <- read.csv('../results/multi_metric_results.csv')
#data2 <- read.csv('../results/multi_metric_results_final.csv')
#data.cols <- names(data)
#data$source <- 'first pass'
#data2$source <- 'second pass'
#data <- merge(x=data, y=data2, all=TRUE, by=data.cols)
#data$rowSource <- apply(data[c("source.x", "source.y")], 1,
#                          function(x) paste(na.omit(x), collapse = ""))
factor.cols <- c("model", "model_names", "model_state", "model_size", "language", "probe", "task", "corpus", "task_name", "metric")
num.cols <- c("score")
int.cols <- c("layer")
data[factor.cols] <- lapply(data[factor.cols], as.factor)
data[num.cols] <- lapply(data[num.cols], as.numeric)
data[int.cols] <- lapply(data[int.cols], as.integer)
layer_sizes <- c("12", "24", "0")
names(layer_sizes) <- c("Base", "Large", "Baseline")
layer_sizes['Base']
get_model_size <- function(string){
if (string == 'Base'){
return(12)
}
else if (string == 'Large'){
return(24)
}
else{
return(0)
}
}
data["max_layer"] <- sapply(data$model_size, get_model_size)
data['model_percent'] <- data$layer / data$max_layer
#data['Model'] <- data$model_names
data['State'] <- data$model_state
data['Language'] <- data$corpus
data['Comparison'] <- data$model_names
data <- data %>%mutate(Language = case_when(corpus %in% c('switchboard') ~ 'English', corpus %in% c('mandarin-timit') ~ 'Mandarin'))
monolingual_models <- c('English Large', 'English Base', 'Mandarin Base', 'English Finetuned', 'Mandarin Finetuned', 'English Large Finetuned', 'English Large Finetunted')
multilingual_models <- c('Multilingual Large 128', 'Multilingual Large 53')
monolingual_base <- c('English Large', 'English Base', 'Mandarin Base')
monolingual_finetuned <- c('English Finetuned', 'Mandarin Finetuned', 'English Large Finetuned', 'English Large Finetunted')
data <- data %>% mutate(Comparison = case_when(model_names %in% c('HuBert', 'WavLM') ~ 'Other Models', model_names %in% monolingual_models ~ 'Monolingual wav2vec 2.0', model_names %in% multilingual_models ~ 'Multilingual wav2vec 2.0'))# model_names %in% c('English Finetuned', 'Mandarin Finetuned', 'English Large Finetuned', 'English Large Finetunted') ~ 'Fine-tuned'),)
data$task_name <- factor(data$task, levels=c("syllables_accents", "stress", "tone", "f0", "f0_300", "stress_polysyllabic", "energy", "intensity"), labels=c("Accent", "Stress", "Tone", "F0", "F0", "Stress", "RMS Energy", "Intensity (dB SPL)"),)
plot_df <- data[((data$metric == 'f1')|(data$metric == 'R2')) &!(data$model_names %in% monolingual_finetuned)&(data$corpus != 'yemba')&(data$corpus != 'bu_radio')&(data$probe == 'linear')&(data$model_type != 'Baseline')&((data$model != 'wav2vec2-large') & (data$model != 'wav2vec2-large-960h'))&((data$task == 'tone')|(data$task == 'syllables_accents')|(data$task == 'stress')|((data$task %in% c('f0', 'intensity')) & (data$corpus == 'switchboard'))),]
plot_df2 <- data[((data$metric == 'f1')|(data$metric == 'R2')) &(data$model_names %in% monolingual_models)&(data$corpus != 'yemba')&(data$corpus != 'bu_radio')&(data$probe == 'linear')&(data$model_type != 'Baseline')&((data$model != 'wav2vec2-large') & (data$model != 'wav2vec2-large-960h'))&((data$task == 'tone')|(data$task == 'syllables_accents')|(data$task == 'stress')|((data$task %in% c('f0', 'intensity')) & (data$corpus == 'switchboard'))),]
plot_df2 %>% plot_mtwvs(wav2vec_checkpoint_name = "Layerwise Linear Probe Performance")
ggsave('paper_plots/all_feats.png', width=20, height=10)
plot_df %>% plot_mtwvs(wav2vec_checkpoint_name = "Layerwise Linear Probe Performance")
ggsave('paper_plots/all_feats.png', width=20, height=10)
plot_df %>% plot_mtwvs(wav2vec_checkpoint_name = "Layerwise Linear Probe Performance")
plot_df2 %>% plot_mtwvs(wav2vec_checkpoint_name = "Layerwise Linear Probe Performance")
plot_mtwvs <- function(mtwv_df, wav2vec_checkpoint_name = "wav2vec 2.0 Large (LibriSpeech 960h)"){
plot_df <- mtwv_df %>%
rename(
Model  = model_names,
Layer = model_percent,
Score     = score
) %>%
mutate(
#      Dataset = case_when(
#        Dataset %in% c("random", "fbank")    ~ str_to_upper(Features),
#      ),
#      Dataset = ifelse(
#        Dataset %in% c("FBANK", "RANDOM"),
#        Dataset,
#        Dataset
#      ), #%>%
# Legend ordering
Model = factor(
Model,
levels = c("English Base", "Mandarin Base", "Mandarin Finetuned", "English Finetuned", "English Large", "Multilingual Large 128", "Multilingual Large 53", "HuBert", "WavLM") ),
State = factor(
State,
levels = c("Pre-trained", "Fine-tuned", "Baseline")
)
)
plot_top_ranked <- plot_df %>%
group_by(task_name, State) %>%
slice_max(order_by = Score, n = 1)
print(plot_df)
plot_df %>%
ggplot(aes(x = Layer, y = Score, group = Model)) +
geom_line(aes(color = Model, linetype=State), size=0.75, show.legend=TRUE) +
geom_point(aes(shape = Model), size = 1) +
geom_point(
aes(shape = Model),
size = 1.5,
stroke = 1,
color = "#e41a1c",
data = plot_top_ranked,
show.legend = FALSE
# position = "jitter"
) +
facet_grid(task_name,space = "free_x", scales = "free_x",) +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position="bottom") +
theme_base(base_size = 14) +
theme(
rect = element_blank(),
panel.grid.major = element_line(colour = "grey"),
legend.position="bottom",
legend.margin=margin(0,0,0,0),
legend.box.margin=margin(-5,-5,-5,-5)
) +
#ylim(0.25, 1) +
scale_shape_manual(values = c(
18, # eng-mav
19, # nld-gng
2,  # gbb-pd
6,  # wrm-pd
3,  # wrl-mb
4,  # gup-wat
8,  # pjt-sw01
1,  # wbp-jk
0,  # mwf-jm
5   # gbb-lg
)) +
guides(
colour = guide_legend(show = FALSE),
shape = guide_legend(override.aes = list(size = 4), nrow = 3)
)
}
plot_df2 %>% plot_mtwvs(wav2vec_checkpoint_name = "Layerwise Linear Probe Performance")
View(plot_df)
View(plot_df2)
plot_mtwvs <- function(mtwv_df, wav2vec_checkpoint_name = "wav2vec 2.0 Large (LibriSpeech 960h)"){
plot_df <- mtwv_df %>%
rename(
Model  = model_names,
Layer = model_percent,
Score     = score
) %>%
mutate(
#      Dataset = case_when(
#        Dataset %in% c("random", "fbank")    ~ str_to_upper(Features),
#      ),
#      Dataset = ifelse(
#        Dataset %in% c("FBANK", "RANDOM"),
#        Dataset,
#        Dataset
#      ), #%>%
# Legend ordering
Model = factor(
Model,
levels = c("English Base", "Mandarin Base", "Mandarin Finetuned", "English Finetuned", "English Large", "Multilingual Large 128", "Multilingual Large 53", "HuBert", "WavLM") ),
State = factor(
State,
levels = c("Pre-trained", "Fine-tuned", "Baseline")
)
)
plot_top_ranked <- plot_df %>%
group_by(task_name, State) %>%
slice_max(order_by = Score, n = 1)
print(plot_df)
plot_df %>%
ggplot(aes(x = Layer, y = Score, group = Model)) +
geom_line(aes(color = Model, linetype=State), size=0.75, show.legend=TRUE) +
geom_point(aes(shape = Model), size = 1) +
geom_point(
aes(shape = Model),
size = 1.5,
stroke = 1,
color = "#e41a1c",
data = plot_top_ranked,
show.legend = FALSE
# position = "jitter"
) +
facet_grid(~task_name,space = "free_x", scales = "free_x",) +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position="bottom") +
theme_base(base_size = 14) +
theme(
rect = element_blank(),
panel.grid.major = element_line(colour = "grey"),
legend.position="bottom",
legend.margin=margin(0,0,0,0),
legend.box.margin=margin(-5,-5,-5,-5)
) +
#ylim(0.25, 1) +
scale_shape_manual(values = c(
18, # eng-mav
19, # nld-gng
2,  # gbb-pd
6,  # wrm-pd
3,  # wrl-mb
4,  # gup-wat
8,  # pjt-sw01
1,  # wbp-jk
0,  # mwf-jm
5   # gbb-lg
)) +
guides(
colour = guide_legend(show = FALSE),
shape = guide_legend(override.aes = list(size = 4), nrow = 3)
)
}
plot_df2 %>% plot_mtwvs(wav2vec_checkpoint_name = "Layerwise Linear Probe Performance")
plot_mtwvs <- function(mtwv_df, wav2vec_checkpoint_name = "wav2vec 2.0 Large (LibriSpeech 960h)"){
plot_df <- mtwv_df %>%
rename(
Model  = model_names,
Layer = model_percent,
Score     = score
) %>%
mutate(
#      Dataset = case_when(
#        Dataset %in% c("random", "fbank")    ~ str_to_upper(Features),
#      ),
#      Dataset = ifelse(
#        Dataset %in% c("FBANK", "RANDOM"),
#        Dataset,
#        Dataset
#      ), #%>%
# Legend ordering
Model = factor(
Model,
levels = c("English Base", "Mandarin Base", "Mandarin Finetuned", "English Finetuned", "English Large", "Multilingual Large 128", "Multilingual Large 53", "HuBert", "WavLM") ),
State = factor(
State,
levels = c("Pre-trained", "Fine-tuned", "Baseline")
)
)
plot_top_ranked <- plot_df %>%
group_by(task_name, State) %>%
slice_max(order_by = Score, n = 1)
print(plot_df)
plot_df %>%
ggplot(aes(x = Layer, y = Score, group = Model)) +
geom_line(aes(color = Model, linetype=State), size=0.75) +
geom_point(aes(shape = Model), size = 1) +
geom_point(
aes(shape = Model),
size = 1.5,
stroke = 1,
color = "#e41a1c",
data = plot_top_ranked,
show.legend = FALSE
# position = "jitter"
) +
facet_grid(~task_name,space = "free_x", scales = "free_x",) +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position="bottom") +
theme_base(base_size = 14) +
theme(
rect = element_blank(),
panel.grid.major = element_line(colour = "grey"),
legend.position="bottom",
legend.margin=margin(0,0,0,0),
legend.box.margin=margin(-5,-5,-5,-5)
) +
#ylim(0.25, 1) +
scale_shape_manual(values = c(
18, # eng-mav
19, # nld-gng
2,  # gbb-pd
6,  # wrm-pd
3,  # wrl-mb
4,  # gup-wat
8,  # pjt-sw01
1,  # wbp-jk
0,  # mwf-jm
5   # gbb-lg
)) +
guides(
colour = guide_legend(show = FALSE),
shape = guide_legend(override.aes = list(size = 4), nrow = 3)
)
}
plot_mtwvs <- function(mtwv_df, wav2vec_checkpoint_name = "wav2vec 2.0 Large (LibriSpeech 960h)"){
plot_df <- mtwv_df %>%
rename(
Model  = model_names,
Layer = model_percent,
Score     = score
) %>%
mutate(
#      Dataset = case_when(
#        Dataset %in% c("random", "fbank")    ~ str_to_upper(Features),
#      ),
#      Dataset = ifelse(
#        Dataset %in% c("FBANK", "RANDOM"),
#        Dataset,
#        Dataset
#      ), #%>%
# Legend ordering
Model = factor(
Model,
levels = c("English Base", "Mandarin Base", "Mandarin Finetuned", "English Finetuned", "English Large", "Multilingual Large 128", "Multilingual Large 53", "HuBert", "WavLM") ),
State = factor(
State,
levels = c("Pre-trained", "Fine-tuned", "Baseline")
)
)
plot_top_ranked <- plot_df %>%
group_by(task_name, State) %>%
slice_max(order_by = Score, n = 1)
print(plot_df)
plot_df %>%
ggplot(aes(x = Layer, y = Score, group = Model)) +
geom_line(aes(color = Model, linetype=State), size=0.75) +
geom_point(aes(shape = Model), size = 1) +
geom_point(
aes(shape = Model),
size = 1.5,
stroke = 1,
color = "#e41a1c",
data = plot_top_ranked,
show.legend = FALSE
# position = "jitter"
) +
facet_grid(task_name+Comparison,space = "free_x", scales = "free_x",) +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position="bottom") +
theme_base(base_size = 14) +
theme(
rect = element_blank(),
panel.grid.major = element_line(colour = "grey"),
legend.position="bottom",
legend.margin=margin(0,0,0,0),
legend.box.margin=margin(-5,-5,-5,-5)
) +
#ylim(0.25, 1) +
scale_shape_manual(values = c(
18, # eng-mav
19, # nld-gng
2,  # gbb-pd
6,  # wrm-pd
3,  # wrl-mb
4,  # gup-wat
8,  # pjt-sw01
1,  # wbp-jk
0,  # mwf-jm
5   # gbb-lg
)) +
guides(
colour = guide_legend(show = FALSE),
shape = guide_legend(override.aes = list(size = 4), nrow = 3)
)
}
plot_df2 %>% plot_mtwvs(wav2vec_checkpoint_name = "Layerwise Linear Probe Performance")
plot_mtwvs <- function(mtwv_df, wav2vec_checkpoint_name = "wav2vec 2.0 Large (LibriSpeech 960h)"){
plot_df <- mtwv_df %>%
rename(
Model  = model_names,
Layer = model_percent,
Score     = score
) %>%
mutate(
#      Dataset = case_when(
#        Dataset %in% c("random", "fbank")    ~ str_to_upper(Features),
#      ),
#      Dataset = ifelse(
#        Dataset %in% c("FBANK", "RANDOM"),
#        Dataset,
#        Dataset
#      ), #%>%
# Legend ordering
Model = factor(
Model,
levels = c("English Base", "Mandarin Base", "Mandarin Finetuned", "English Finetuned", "English Large", "Multilingual Large 128", "Multilingual Large 53", "HuBert", "WavLM") ),
State = factor(
State,
levels = c("Pre-trained", "Fine-tuned", "Baseline")
)
)
plot_top_ranked <- plot_df %>%
group_by(task_name, State) %>%
slice_max(order_by = Score, n = 1)
print(plot_df)
plot_df %>%
ggplot(aes(x = Layer, y = Score, group = Model)) +
geom_line(aes(color = Model, linetype=State), size=0.75) +
geom_point(aes(shape = Model), size = 1) +
geom_point(
aes(shape = Model),
size = 1.5,
stroke = 1,
color = "#e41a1c",
data = plot_top_ranked,
show.legend = FALSE
# position = "jitter"
) +
facet_grid(task_name~Comparison,space = "free_x", scales = "free_x",) +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position="bottom") +
theme_base(base_size = 14) +
theme(
rect = element_blank(),
panel.grid.major = element_line(colour = "grey"),
legend.position="bottom",
legend.margin=margin(0,0,0,0),
legend.box.margin=margin(-5,-5,-5,-5)
) +
#ylim(0.25, 1) +
scale_shape_manual(values = c(
18, # eng-mav
19, # nld-gng
2,  # gbb-pd
6,  # wrm-pd
3,  # wrl-mb
4,  # gup-wat
8,  # pjt-sw01
1,  # wbp-jk
0,  # mwf-jm
5   # gbb-lg
)) +
guides(
colour = guide_legend(show = FALSE),
shape = guide_legend(override.aes = list(size = 4), nrow = 3)
)
}
plot_df2 %>% plot_mtwvs(wav2vec_checkpoint_name = "Layerwise Linear Probe Performance")
plot_mtwvs <- function(mtwv_df, wav2vec_checkpoint_name = "wav2vec 2.0 Large (LibriSpeech 960h)"){
plot_df <- mtwv_df %>%
rename(
Model  = model_names,
Layer = model_percent,
Score     = score
) %>%
mutate(
#      Dataset = case_when(
#        Dataset %in% c("random", "fbank")    ~ str_to_upper(Features),
#      ),
#      Dataset = ifelse(
#        Dataset %in% c("FBANK", "RANDOM"),
#        Dataset,
#        Dataset
#      ), #%>%
# Legend ordering
Model = factor(
Model,
levels = c("English Base", "Mandarin Base", "Mandarin Finetuned", "English Finetuned", "English Large", "Multilingual Large 128", "Multilingual Large 53", "HuBert", "WavLM") ),
State = factor(
State,
levels = c("Pre-trained", "Fine-tuned", "Baseline")
)
)
plot_top_ranked <- plot_df %>%
group_by(task_name, State) %>%
slice_max(order_by = Score, n = 1)
print(plot_df)
plot_df %>%
ggplot(aes(x = Layer, y = Score, group = Model)) +
geom_line(aes(color = Model, linetype=State), size=0.75, show.legend=FALSE) +
geom_point(aes(shape = Model), size = 1) +
geom_point(
aes(shape = Model),
size = 1.5,
stroke = 1,
color = "#e41a1c",
data = plot_top_ranked,
show.legend = FALSE
# position = "jitter"
) +
facet_grid(task_name~Comparison,space = "free_x", scales = "free_x",) +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position="bottom") +
theme_base(base_size = 14) +
theme(
rect = element_blank(),
panel.grid.major = element_line(colour = "grey"),
legend.position="bottom",
legend.margin=margin(0,0,0,0),
legend.box.margin=margin(-5,-5,-5,-5)
) +
#ylim(0.25, 1) +
scale_shape_manual(values = c(
18, # eng-mav
19, # nld-gng
2,  # gbb-pd
6,  # wrm-pd
3,  # wrl-mb
4,  # gup-wat
8,  # pjt-sw01
1,  # wbp-jk
0,  # mwf-jm
5   # gbb-lg
)) +
guides(
colour = guide_legend(show = FALSE),
shape = guide_legend(override.aes = list(size = 4), nrow = 3)
)
}
plot_df2 %>% plot_mtwvs(wav2vec_checkpoint_name = "Layerwise Linear Probe Performance")
ggsave('paper_plots/all_feats_fine_tuned.png', width=20, height=10)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
data <- read.csv('../results/interspeech_final_results.csv')
View(data)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
source("~/Projects/prosody_probing/analysis/visualizations.R", echo=TRUE)
